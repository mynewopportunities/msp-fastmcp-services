version: '3.8'

services:
  # Main FastMCP Services
  msp-orchestrator:
    build: .
    container_name: msp-orchestrator
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/msp_enterprise
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - EMBEDDING_MODEL=all-MiniLM-L6-v2
      - OPENAI_MODEL=gpt-4
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - msp-network
    command: python msp_service_orchestrator.py

  # RAG System Service
  rag-service:
    build: .
    container_name: msp-rag-service
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/msp_enterprise
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - EMBEDDING_MODEL=all-MiniLM-L6-v2
    ports:
      - "8001:8001"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models
    restart: unless-stopped
    networks:
      - msp-network
    command: python fastmcp_rag_system.py

  # Calling Assistant Service
  calling-service:
    build: .
    container_name: msp-calling-service
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/msp_enterprise
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
    ports:
      - "8002:8002"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - msp-network
    command: python fastmcp_calling_assistant.py

  # Chatbot Service
  chatbot-service:
    build: .
    container_name: msp-chatbot-service
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/msp_enterprise
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - EMBEDDING_MODEL=all-MiniLM-L6-v2
    ports:
      - "8003:8003"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - msp-network
    command: python fastmcp_intelligent_chatbot.py

  # Analytics Dashboard Service
  analytics-service:
    build: .
    container_name: msp-analytics-service
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/msp_enterprise
      - REDIS_URL=redis://redis:6379
    ports:
      - "8004:8004"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - msp-network
    command: python fastmcp_analytics_dashboard.py

  # PostgreSQL Database
  postgres:
    image: pgvector/pgvector:pg15
    container_name: msp-postgres
    environment:
      - POSTGRES_DB=msp_enterprise
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    networks:
      - msp-network
    command: >
      postgres -c shared_preload_libraries=vector
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: msp-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - msp-network
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # NGINX Load Balancer
  nginx:
    image: nginx:alpine
    container_name: msp-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - msp-orchestrator
      - rag-service
      - calling-service
      - chatbot-service
      - analytics-service
    restart: unless-stopped
    networks:
      - msp-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: msp-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - msp-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: msp-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - msp-network

  # Log Management with ELK Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: msp-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped
    networks:
      - msp-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: msp-logstash
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - msp-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: msp-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - msp-network

  # Message Queue for Async Processing
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: msp-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped
    networks:
      - msp-network

  # Background Task Worker
  worker:
    build: .
    container_name: msp-worker
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/msp_enterprise
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - postgres
      - redis
      - rabbitmq
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - msp-network
    command: python worker.py

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  rabbitmq_data:
    driver: local

networks:
  msp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16